#####

import hancho
import glob

hancho.Config.build_tag = "debug"

deps = hancho.Config()
deps.metrolib = hancho.repo("symlinks/metrolib/build.hancho", **deps)
deps.rules    = hancho.load("rules/rules.hancho", **deps)
deps.metron   = hancho.load("metron/metron.hancho", **deps)

tests    = hancho.load("tests/tests.hancho", **deps)
examples = hancho.load("examples/examples.hancho", **deps)

hancho.load("metron/metron_wasm.hancho", **deps)

#---------------------------------------------------------------------------------------------------
# Bundled headers for demo & tutorial

def sorted_glob(*args, **kwargs):
    return sorted(glob.glob(*args, **kwargs))

examples_data = hancho.Task(
  command  = "python3 $EMSDK/upstream/emscripten/tools/file_packager.py {out_data} {flags} --js-output={out_js} --preload {preloads} --exclude {excludes} 2> /dev/null",
  flags    = "--no-node",
  preloads = "examples tests/metron",
  excludes = "*.cpp *.sv *.MD *.hex *.pcf *.v *.txt *.hancho",

  in_examples = sorted_glob("examples/**/*.h"),
  in_tests    = sorted_glob("tests/metron/**/*.h"),

  out_data = "docs/demo/examples.data",
  out_js   = "docs/demo/examples.js",
)

tutorial_data = hancho.Task(
  command  = "python3 $EMSDK/upstream/emscripten/tools/file_packager.py {out_data} {flags} --js-output={out_js} --preload {preloads} --exclude {excludes} 2> /dev/null",
  flags    = "--no-node",
  preloads = "examples/tutorial examples/uart",
  excludes = "*.cpp *.sv *.MD *.hex *.pcf *.v *.txt *.hancho",

  in_tutorial = sorted_glob("examples/tutorial/**/*.h"),
  in_uart     = sorted_glob("examples/uart/**/*.h"),

  out_data = "docs/tutorial/tutorial_src.data",
  out_js   = "docs/tutorial/tutorial_src.js",
)

#---------------------------------------------------------------------------------------------------

test_yosys = hancho.Config(
  name = "test yosys",
  desc = "test yosys {rel(in_src)}",
  command = "yosys -q -p 'read_verilog {includes} -sv {rel(in_src)};  dump; synth_ice40 -json /dev/null' 2> /dev/null",
  includes = ["-I."],
)

test_yosys_v = hancho.Config(
  name = "test yosys",
  desc = "test yosys {rel(in_src)}",
  command = "yosys -q -p 'read_verilog {includes} -sv {rel(in_src)};' 2> /dev/null",
  includes = ["-I."],
)

test_verilator = hancho.Config(
  name = "test verilator",
  desc = "test verilator {rel(in_src)}",
  command = "verilator -Wno-width {includes} --lint-only {rel(in_src)} > /dev/null",
  includes = ["-I."],
)

test_icarus = hancho.Config(
  name = "test icarus",
  desc = "test icarus {rel(in_src)}",
  command = "iverilog -g2012 -Wall {includes} -o /dev/null {rel(in_src)} 2> /dev/null",
  includes = ["-I."],
)

test_syntax = hancho.Config(
  name = "test syntax",
  desc = "test syntax {rel(in_src)}",
  command = "g++ -I. --std=gnu++2a -fsyntax-only -c {rel(in_src)} > /dev/null"
)

test_metron = hancho.Config(
  name = "test metron",
  desc = "test metron {rel(in_src)}",
  command = "{metron_bin} -q -c {rel(in_src)} -o {rel(out_sv)} > /dev/null",
  out_sv = "{swap_ext(in_src, '.sv')}",
  metron_bin = deps.metron.metron_bin,
)

test_diff = hancho.Config(
  name = "test diff",
  desc = "test diff {rel(in_src_A)} {rel(in_src_B)}",
  command = "diff {rel(in_src_A)} {rel(in_src_B)}"
)

test_sv2v = hancho.Config(
  name = "test sv2v",
  desc = "test sv2v {rel(in_src)}",
  command = "sv2v {includes} {rel(in_src)} -w {rel(out_v)} > /dev/null",
  includes = ["-I."],
  out_v = "{swap_ext(in_src, '.v')}",
)

#---------------------------------------------------------------------------------------------------
# Test tool quirks

for file in glob.glob("tests/tools/pass/*.sv"):
  test_icarus(in_src = file)
  test_yosys(in_src = file)
  test_verilator(in_src = file)

for file in glob.glob("tests/tools/yosys/fail/*.sv"):
  test_yosys(in_src = file, should_fail = True)

#---------------------------------------------------------------------------------------------------
# Test files in tests/metron/pass and tests/metron/fail

for file in glob.glob("tests/metron/pass/*.h"):
  includes = ["-I.", "-I{build_path}/tests/metron/pass"]

  test_syntax(in_src = file)
  file_sv = test_metron(in_src = file, should_fail = False).promise("out_sv")
  file_v  = test_sv2v(in_src = file_sv, includes = includes).promise("out_v")

  golden = file.replace("/pass/", "/golden/").replace(".h", ".sv")
  test_diff(in_src_A = golden, in_src_B = file_sv)

  test_verilator(in_src = file_sv, includes = includes)
  test_icarus(in_src = file_sv, includes = includes)
  test_yosys(in_src = file_v, includes = includes)

for file in glob.glob("tests/metron/fail/*.h"):
  test_syntax(in_src = file)
  test_metron(in_src = file, should_fail = True)

#---------------------------------------------------------------------------------------------------
# Lockstep tests

def test_lockstep(file, should_fail = False):
  out_sv = test_metron(in_src = file).promise("out_sv")

  out_vl = deps.rules.verilator(
    name = "test lockstep",
    in_top = out_sv,
    includes = [],
  )

  lockstep_obj = hancho.Task(
    command = "g++ -O3 -std=gnu++2a {defines} {includes} -c {rel(in_src)} -o {rel(out_obj)}",
    includes = ["-I.", "-Isymlinks", "-Isymlinks/metrolib", "-I{build_path}/tests/lockstep", "-I/usr/local/share/verilator/include"],
    defines = "-DMT_TOP=Module -DVL_TOP=V{stem} -DMT_HEADER=tests/lockstep/{stem}.h -DVL_HEADER=build/debug/metron/tests/lockstep/V{stem}.h",
    in_src  = "tests/lockstep/test_lockstep.cpp",
    in_hdr  = file,
    in_deps = out_vl.promise("out_header"),
    out_obj = "{swap_ext(in_hdr, '.o')}",
    stem    = "{path.splitext(path.basename(in_hdr))[0]}",
  )

  lockstep_bin = hancho.Task(
    command = "g++ {in_obj} {in_lib} -o {rel(out_bin)}",
    in_obj = lockstep_obj.promise("out_obj"),
    in_lib = [out_vl.promise("out_lib"), deps.metrolib.libcore],
    out_bin = "{swap_ext(in_obj, '')}",
  )

  hancho.Task(
    command = "{in_bin} > /dev/null",
    in_bin = lockstep_bin.promise("out_bin"),
    should_fail = should_fail,
  )

for file in ["tests/lockstep/lfsr.h", "tests/lockstep/counter.h", "tests/lockstep/funcs_and_tasks.h"]:
  test_lockstep(file, should_fail = False)

for file in ["tests/lockstep/timeout_bad.h", "tests/lockstep/lockstep_bad.h"]:
  test_lockstep(file, should_fail = True)

#---------------------------------------------------------------------------------------------------
# Standalone tests

#good: build/debug/metron/tests/utils/test_logic
#good: build/debug/metron/examples/uart/uart_cpp examples/uart/message.hex
#good: build/debug/metron/examples/uart/uart_vl
#good: build/debug/metron/examples/uart/uart_iv
#good: build/debug/metron/examples/rvsimple/rvsimple
#good: build/debug/metron/examples/rvsimple/rvsimple_vl
#good: build/debug/metron/examples/rvsimple/rvsimple_ref
