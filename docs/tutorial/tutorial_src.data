class Adder {
public:
  int add(int a, int b) {
    return a + b;
  }
};

//----------

class Adder2 {
public:
  int a;
  int b;
  int sum;

  void add() {
    sum = a + b;
  }
};
#include "metron/metron_tools.h"

class Module {
  // Private only so we don't spam our port list for this example
private:

  // Logic types can be indexed like arrays that return individual bits.
  logic<1> extract_bit_four(logic<16> a) {
    return a[4];
  }

  // bN(x, offset) is shorthand for bx<N>(x, offset) which extracts a slice
  // of the bits in a field. Slices that overflow the source will be padded
  // with 0.
  logic<3> extract_three_bits_starting_at_bit_four(logic<16> a) {
    return b3(a, 4);
  }

  // Logic types can be concatenated together, and the result's bit width will
  // be the sum of the bit widths of the arguments.
  logic<3> concatenate(logic<1> a, logic<1> b, logic<1> c) {
    return cat(a, b, c);
  }

  // Logic types can be duplicated, which is equivalent to cat(x, x, x...). The
  // result's bit width will be the product of the argument width and the dup
  // count.
  logic<9> duplicate_three_times(logic<3> a) {
    return dup<3>(a);
  }
};
#include "metron/metron_tools.h"

//------------------------------------------------------------------------------

class Blockram {
public:
  Blockram() {
    readmemh("blockram.hex", memory_, 0, 255);
  }

  logic<8> get_data() const {
    return data_out_;
  }

  void tick(logic<8> address, logic<1> write, logic<8> data_in) {
    if (write) {
      memory_[address] = data_in;
      data_out_ = data_in;
    }
    else {
      data_out_ = memory_[address];
    }
  }

private:
  logic<8> memory_[256];
  logic<8> data_out_;
};
#include "metron/metron_tools.h"
#include "blockram.h"

//------------------------------------------------------------------------------

class Checksum {
public:

  int get_checksum() const {
    return sum_;
  }

  int get_done() const {
    return cursor_ == 256;
  }

  void tock(int reset) {
    logic<8> data = ram.get_data();
    ram.tick(cursor_, 0, 0);
    tick(reset, data);
  }

private:

  void tick(int reset, logic<8> data) {
    if (reset) {
      cursor_ = 0;
      sum_ = 0;
    }
    else {
      if (cursor_ < 256) {
        cursor_ = cursor_ + 1;
        sum_ = sum_ + data;
      }
    }
  }

  int cursor_;
  int sum_;
  Blockram ram;
};

//------------------------------------------------------------------------------
// If "sum" does not have an underscore suffix, it is a signal and "add" will
// be converted to an always_comb block.
class Adder1 {
public:
  int sum;
  void add(int a, int b) {
    sum = a + b;
  }
};

// If "sum" does have an underscore suffix, it is a register and "add" will
// be converted to an always_ff block.
class Adder2 {
public:
  int sum_;
  void add(int a, int b) {
    sum_ = a + b;
  }
};
// A very basic counter in plain C++, converted to Verilog using Metron.

class Counter {
public:
  int count_;
  void update() {
    count_++;
  }
};
// FIXME this example is outdated

// If we try to update mutually-dependent fields in one function, we'll hit an
// error. Uncomment to see the error.

/*
class Module1 {
public:
  int a;
  int b;

  void update() {
    a = b + 1;
    b = a + 1;
  }
};
*/

// This module declares "update_a" first.
class Module2 {
public:
  int a_;
  int b;

  void update_a() {
    a_ = b + 1;
  }

  void update_b() {
    b = a_ + 1;
  }
};

// This module declares "update_b" first.
class Module3 {
public:
  int a;
  int b_;

  void update_a() {
    a = b_ + 1;
  }

  void update_b() {
    b_ = a + 1;
  }
};

// This module uses temporaries to update both A and B in a single function
class Module4 {
public:
  int a_;
  int b_;

  void update() {
    int old_a = a_;
    int old_b = b_;
    a_ = old_b + 1;
    b_ = old_a + 1;
  }
};
class ModuleWithFunction {
public:

  // Tock methods can call pure functions.
  int get_signal1(int x) {
    return reg1_ + my_func(x);
  }

  // Tick methods can call pure functions.
  void update_reg() {
    reg1_ = my_func(reg1_);
  }

private:
  int reg1_;

  // This function is called elsewhere in the module, so it would not be
  // added to the port list even if it were public.
  int my_func(int x) const {
    return x + 17;
  }

  // This function would appear in the port list if it were public.
  // Uncomment the line below to see the difference.
//public:
  int my_func2(int x) const {
    return x + 17;
  }
};

//----------------------------------------

class ModuleWithTask {
public:
  int reg1_;
  int reg2_;

  // The top-level tick method will become an always_ff.
  void tick1() {
    reg1_ = reg1_ + 1;
    tick2();
  }

  // Tick methods called by other tick methods will become tasks.
  void tick2() {
    reg2_ = reg2_ + 1;
  }
};
class NonBlockingAssignment {
public:
  int count_;
  void update() {
    count_ = count_ + 1;
    int dummy = count_;
  }
};
#include "adder.h"
#include "counter.h"

class ModuleWithSubmodules {
public:
  int result;

  void update() {
    // The field "my_counter.count" is a register, which means we can only read
    // it _before_ it is written. Uncomment this line to see the error if we
    // call update() on the counter before we send its value to the adder.
    // my_counter.update();

    // Each branch of our if() can call my_adder.add, but we can only have one
    // call to it total per code path.
    if (1) {
      result = my_adder.add(my_counter.count_, 7);
    }
    else {
      result = my_adder.add(23, my_counter.count_);
    }

    // If we try to call it a second time, Metron will generate an error.
    // int result2 = my_adder.add(3, 4);

    // The counter's update() method is a tick, but the method we're currently
    // in is a tock. This cross-module, cross-tick/tock call is OK.
    my_counter.update();
  }

private:
  // Metron will generate and bind variables to our submodules during
  // conversion so that we can "call" methods in them.
  Adder my_adder;
  Counter my_counter;
};
#include "metron/metron_tools.h"

namespace MyPackage {
  static const int ADDER_WIDTH = 17;
  static const int INCREMENT_VAL = 3;
};

template<int width = 32>
class AdjustableAdder {
public:
  logic<width> add(logic<width> a, logic<width> b) {
    return a + b;
  }
};

class Module {
  public:
  logic<MyPackage::ADDER_WIDTH> increment(logic<MyPackage::ADDER_WIDTH> x) {
    return x + MyPackage::INCREMENT_VAL;
  }

private:
  AdjustableAdder<MyPackage::ADDER_WIDTH> my_adder;
};
class Tutorial2 {
public:

  int get_thing() {
    return 1;
  }
};
// Tutorial 3

class Module {
public:
};
// Tutorial 4

class Module {
public:
};
// Tutorial 5

class Module {
public:
};
#include "metron/metron_tools.h"

/*
640x480x60
Pixel clock 25.175 MHz

Screen X    [000-639]
Front porch [640-655]
HSync-      [656-751]
Back porch  [752-799]

Screen Y    [000-479]
Front porch [480-489]
VSync-      [490-491]
Back porch  [492-524]
*/

class VGAOut {
 public:
  logic<1> vga_hsync;
  logic<1> vga_vsync;
  logic<1> vga_R;
  logic<1> vga_G;
  logic<1> vga_B;

  logic<1> in_border() const {
    return (px_ <= 7) || (px_ >= 633) || (py_ <= 7) || (py_ >= 473);
  }

  logic<1> in_checker() const {
    return px_[3] ^ py_[3];
  }

  void update_video() {
    vga_hsync = !((px_ >= 656) && (px_ <= 751));
    vga_vsync = !((py_ >= 490) && (py_ <= 491));

    if ((px_ < 640) && (py_ < 480)) {
      vga_R = in_border() | in_checker();
      vga_G = in_border();
      vga_B = in_border();
    } else {
      vga_R = 0;
      vga_G = 0;
      vga_B = 0;
    }
  }

  void update_counters() {
    logic<10> new_px = px_ + 1;
    logic<10> new_py = py_;

    if (new_px == 800) {
      new_px = 0;
      new_py = new_py + 1;
    }

    if (new_py == 525) {
      new_py = 0;
    }

    px_ = new_px;
    py_ = new_py;
  }

private:
  logic<10> px_;
  logic<10> py_;
};
