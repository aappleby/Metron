import hancho

config   = imports.config
metrolib = imports.metrolib
metron   = imports.metron
rules    = imports.rules

################################################################################

gb_spu_sv = metron.convert(
  config,
  name     = "GBSPU metronize",
  in_src   = "gb_spu/MetroBoySPU2.h",
)

gb_spu_vl = rules.verilator(
  config,
  name     = "GBSPU verilate",
  in_top   = gb_spu_sv.promise("out_sv"),
  includes = ["{repo_path}"],
)

gb_spu_main = rules.cpp_bin(
  config,
  name     = "GBSPU bin",
  in_srcs  = "gb_spu/gb_spu_main.cpp",
  in_deps  = gb_spu_vl.promise("out_header"),
  in_objs  = gb_spu_vl.promise("out_lib"),
  out_bin  = "gb_spu/gb_spu",
  includes = [
    "{repo_path}",   # for metron/metron_tools.h
    "{build_path}",  # for gb_spu/VMetroBoySPU2.h
    "/usr/local/share/verilator/include",
  ],
)

################################################################################

j1_bin = rules.cpp_bin(
  name    = "J1 bin",
  in_srcs = "j1/main.cpp",
  out_bin = "j1/j1"
)

#j1_h = ["j1/metron/dpram.h", "j1/metron/j1.h"]

j1_top_sv = metron.convert(
  config,
  name = "J1 metronize",
  in_src = "j1/metron/j1.h"
)

j1_dpram_sv = metron.convert(
  config,
  name = "J1 metronize",
  in_src = "j1/metron/dpram.h"
)

# doesn't currently compile

#j1_top_vl = rules.verilator(
#  config,
#  name = "J1 verilate",
#  in_top = j1_top_sv.promise("out_sv"),
#  includes = ["{repo_path}"],
#)


#j1_sv = metron(j1_h)

#hancho.rules.check_cpp_syntax("j1/metron/j1.h")

################################################################################

pong_sv = metron.convert(
  config,
  name   = "pong metronize",
  in_src = "pong/metron/pong.h"
)

pong_vl = rules.verilator(
  config,
  name     = "pong vl",
  in_top   = pong_sv.promise("out_sv"),
  includes = ["{repo_path}"]
)

pong_bin = rules.cpp_bin(
  config,
  name = "pong bin",
  in_srcs = "pong/main.cpp",
  in_libs = [
    pong_vl.promise("out_lib"),
    metrolib.libcore
  ],
  out_bin = "pong/pong",
)

# FIXME verilated version of pong

################################################################################

rvsimple_top_h = "rvsimple/metron/toplevel.h"

rvsimple_h = [
  "rvsimple/metron/adder.h",
  "rvsimple/metron/alu_control.h",
  "rvsimple/metron/alu.h",
  "rvsimple/metron/config.h",
  "rvsimple/metron/constants.h",
  "rvsimple/metron/control_transfer.h",
  "rvsimple/metron/data_memory_interface.h",
  "rvsimple/metron/example_data_memory_bus.h",
  "rvsimple/metron/example_data_memory.h",
  "rvsimple/metron/example_text_memory_bus.h",
  "rvsimple/metron/example_text_memory.h",
  "rvsimple/metron/immediate_generator.h",
  "rvsimple/metron/instruction_decoder.h",
  "rvsimple/metron/multiplexer2.h",
  "rvsimple/metron/multiplexer4.h",
  "rvsimple/metron/multiplexer8.h",
  "rvsimple/metron/regfile.h",
  "rvsimple/metron/register.h",
  "rvsimple/metron/riscv_core.h",
  "rvsimple/metron/singlecycle_control.h",
  "rvsimple/metron/singlecycle_ctlpath.h",
  "rvsimple/metron/singlecycle_datapath.h",
]

rvsimple_sv = [metron.convert(config, in_src = src) for src in rvsimple_h]

rvsimple_top_sv = metron.convert(
  config,
  in_src = rvsimple_top_h
)

rvsimple_top_vl = rules.verilator(
  config,
  name     = "rvsimple vl",
  in_top   = rvsimple_top_sv.promise("out_sv"),
  in_deps  = rvsimple_sv,
  includes = ["{repo_path}"]
)

rvsimple_bin = rules.cpp_bin(
  name = "rvsimple bin",
  in_srcs = "rvsimple/main.cpp",
  in_libs = [
    metrolib.libcore,
    rvsimple_top_vl.promise("out_lib"),
  ],
  out_bin = "rvsimple/rvsimple"
)

# FIXME verilated version of rvsimple?

################################################################################
# UART example

uart_top_h = "uart/metron/uart_top.h"

uart_h = [
  "uart/metron/uart_hello.h",
  "uart/metron/uart_rx.h",
  "uart/metron/uart_tx.h",
]

uart_sv     = [metron.convert(config, in_src = src) for src in uart_h]
uart_top_sv = metron.convert(config, in_src = uart_top_h)
uart_top_vl = rules.verilator(
  config,
  name = "verilate uart_top",
  in_top = uart_top_sv.promise("out_sv"),
  in_deps = uart_sv,
  includes = ["{repo_path}"]
)

uart_bin = rules.cpp_bin(
  name = "uart/uart",
  in_srcs = "uart/main.cpp",
  includes = [
    "{repo_path}",
    "{repo_path}/symlinks/metrolib",
  ],
  in_libs = [
    metrolib.libcore,
  ],
  out_bin = "uart/uart",
)

uart_bin_vl = rules.cpp_bin(
  name = "uart/uart_vl",
  in_srcs = "uart/main_vl.cpp",
  in_deps = uart_top_vl.promise("out_lib"),
  includes = [
    "{repo_path}",
    "{repo_path}/symlinks/metrolib",
    "{build_path}/uart",
    "/usr/local/share/verilator/include",
  ],
  in_libs = [
    metrolib.libcore,
    uart_top_vl.promise("out_lib"),
  ],
  out_bin = "uart/uart_vl",
)

"""
build build/examples/uart/uart_iv:
  iverilog
  examples/uart/uart_test_iv.sv |
  examples/uart/metron_sv/uart_hello.sv
  examples/uart/metron_sv/uart_rx.sv
  examples/uart/metron_sv/uart_top.sv
  examples/uart/metron_sv/uart_tx.sv

  includes = -Iexamples/uart -Iexamples/uart/metron_sv
  defines = -DIVERILOG

build build/examples/uart/uart_test_ice40.json: yosys examples/uart/uart_test_ice40.sv
  | examples/uart/metron_sv/uart_hello.sv
    examples/uart/metron_sv/uart_rx.sv
    examples/uart/metron_sv/uart_top.sv
    examples/uart/metron_sv/uart_tx.sv
    examples/uart/SB_PLL40_CORE.v
  includes = -Iexamples/uart -Iexamples/uart/metron_sv

build build/examples/uart/uart_test_ice40.asc: nextpnr-ice40 build/examples/uart/uart_test_ice40.json
  chip = hx8k
  package = ct256
  pcf = examples/uart/ice40-hx8k-b-evn.pcf

build build/examples/uart/uart_test_ice40.bin: icepack build/examples/uart/uart_test_ice40.asc
"""

################################################################################
