metron   = hancho.metron
rules    = hancho.rules
metrolib = hancho.metrolib

################################################################################

uart_top_h = "uart_top.h"
uart_h = [
  "uart_hello.h",
  "uart_rx.h",
  "uart_tx.h",
]

includes = [
  ".",
  "{repo_dir}",
  "{repo_dir}/symlinks/metrolib",
  "{build_dir}",
  "/usr/local/share/verilator/include",
]

uart_sv     = [hancho(metron.convert, in_src = src) for src in uart_h]
uart_top_sv = hancho(metron.convert, in_src = uart_top_h)

uart_v = [
  hancho(
    rules.sv2v,
    in_sv = task.promise("out_sv"),
    includes = "{repo_dir}"
  )
  for task in uart_sv
]

uart_top_v = hancho(
  rules.sv2v,
  in_sv = uart_top_sv.promise("out_sv"),
  includes = ["{repo_dir}"]
)

# C++ testbench

uart_bin = hancho(
  rules.cpp_bin,
  name     = "uart_cpp",
  in_srcs  = "main.cpp",
  includes = includes,
  in_libs  = [metrolib.libcore],
  out_bin  = "uart_cpp",
)

# Verilator testbench

uart_top_vl = hancho(
  rules.verilator,
  name     = "verilate uart_top",
  in_top   = uart_top_sv.promise("out_sv"), # FIXME has to be a promise, because has to be a string...
  in_deps  = uart_sv,
  includes = includes,
  params   = {"message_file": "{in_message}"},
  in_message = "message.hex",
)

uart_bin_vl = hancho(
  rules.cpp_bin,
  name     = "uart_vl",
  in_srcs  = "main_vl.cpp",
  includes = includes,
  in_deps  = uart_top_vl.promise("out_lib"), # needed so that the compile task depends on uart_top_vl
  in_libs  = [metrolib.libcore, uart_top_vl.promise("out_lib")],
  out_bin  = "uart_vl",
)

# Icarus Verilog testbench

uart_bin_iv = hancho(
  rules.iverilog,
  name     = "uart_iv",
  in_sv    = "uart_test_iv.v",
  in_deps  = [uart_v, uart_top_v],
  out_iv   = "uart_iv",
  includes = includes,
  defines  = "-DIVERILOG",
  top      = "uart_test",
  params   = {"message_file": "{in_message}"},
  in_message = "message.hex",
)

# Synthesizable version of UART

uart_yosys = hancho(
  rules.yosys,
  in_sv    = "uart_test_ice40.v",
  in_deps  = [uart_v, uart_top_v],
  out_json = "{swap_ext(in_sv, '.json')}",
  top      = "uart_test_ice40",
  includes = includes,
  params   = {"message_file": "{in_message}"},
  in_message = "message.hex",
)

uart_nextpnr = hancho(
  rules.nextpnr,
  in_json  = uart_yosys.promise("out_json"),
  out_asc  = "uart_test_ice40.asc",
  chip     = "hx8k",
  package  = "ct256",
  pcf      = "ice40-hx8k-b-evn.pcf",
)

uart_test_ice40_bin = hancho(
  rules.icepack,
  in_asc  = uart_nextpnr.promise("out_asc"),
  out_bin = "uart_test_ice40.bin",
)

################################################################################

test_uart = hancho.Command(
  command = "{in_bin} examples/uart/message.hex",
  out_log = "{stem(in_bin)}.test",
)

hancho(test_uart, in_bin = uart_bin,    task_dir = "{repo_dir}")
hancho(test_uart, in_bin = uart_bin_vl, task_dir = "{repo_dir}")
hancho(test_uart, in_bin = uart_bin_iv, task_dir = "{repo_dir}")
