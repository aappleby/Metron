import hancho

metron   = imports.metron
rules    = imports.rules
metrolib = imports.metrolib

################################################################################

uart_top_h = "uart_top.h"
uart_h = [
  "uart_hello.h",
  "uart_rx.h",
  "uart_tx.h",
]

includes = [
  ".",
  "{repo_path}",
  "{repo_path}/symlinks/metrolib",
  "{build_path}",
  "/usr/local/share/verilator/include",
]

uart_sv     = [metron.convert(in_src = src) for src in uart_h]
uart_top_sv = metron.convert(in_src = uart_top_h)

# C++ testbench

exports.uart_bin = rules.cpp_bin(
  name     = "uart_cpp",
  in_srcs  = "main.cpp",
  includes = includes,
  in_libs  = [metrolib.libcore],
  out_bin  = "uart_cpp",
)

# Verilator testbench

uart_top_vl = rules.verilator(
  name     = "verilate uart_top",
  in_top   = uart_top_sv.promise("out_sv"), # FIXME has to be a promise, because has to be a string...
  in_deps  = uart_sv,
  includes = includes,
  params   = {"message_file": "{in_message}"},
  in_message = "message.hex",
)

exports.uart_bin_vl = rules.cpp_bin(
  name     = "uart_vl",
  in_srcs  = "main_vl.cpp",
  includes = includes,
  in_deps  = uart_top_vl.promise("out_lib"), # needed so that the compile task depends on uart_top_vl
  in_libs  = [metrolib.libcore, uart_top_vl.promise("out_lib")],
  out_bin  = "uart_vl",
)

# Icarus Verilog testbench

exports.uart_bin_iv = rules.iverilog(
  name     = "uart_iv",
  in_sv    = "uart_test_iv.sv",
  in_deps  = [uart_sv, uart_top_sv],
  out_iv   = "uart_iv",
  includes = includes,
  defines  = "-DIVERILOG",
  top      = "uart_test",
  params   = {"message_file": "{in_message}"},
  in_message = "message.hex",
)

# Synthesizable version of UART

uart_yosys = rules.yosys(
  in_sv    = "uart_test_ice40.sv",
  in_deps  = [uart_sv, uart_top_sv],
  out_json = "{swap_ext(in_sv, '.json')}",
  top      = "uart_test_ice40",
  includes = includes,
  params   = {"message_file": "{in_message}"},
  in_message = "message.hex",
)

uart_nextpnr = rules.nextpnr(
  in_json  = uart_yosys.promise("out_json"),
  out_asc  = "uart_test_ice40.asc",
  chip     = "hx8k",
  package  = "ct256",
  pcf      = "ice40-hx8k-b-evn.pcf",
)

uart_test_ice40_bin = rules.icepack(
  in_asc  = uart_nextpnr.promise("out_asc"),
  out_bin = "uart_test_ice40.bin",
)
