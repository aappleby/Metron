import hancho

metrolib = imports.metrolib

#---------------------------------------------------------------------------------------------------

exports.cpp_settings = hancho.Config(
  cpp_flags = ["-rdynamic", "-ggdb3"],
  includes  = [".", "{repo_path}", "{repo_path}/symlinks", "{repo_path}/symlinks/metrolib", "{repo_path}/symlinks/matcheroni"],
  warnings  = ["all", "error", "suggest-override", "no-unused-function", "no-sign-compare", "no-unused-variable", "no-unused-but-set-variable"],
  sys_libs  = ["gcc", "c", "SDL2"],
)

#---------------------------------------------------------------------------------------------------

exports.compile_cpp = hancho.Config(metrolib.rules.compile_cpp, exports.cpp_settings)
exports.cpp_bin     = hancho.Config(metrolib.rules.cpp_bin,     exports.cpp_settings)
exports.cpp_lib     = hancho.Config(metrolib.rules.cpp_lib,     exports.cpp_settings)
exports.make        = metrolib.rules.make

exports.check_cpp_syntax = hancho.Config(
  command = "g++ -I. -I{repo_path} -fsyntax-only -c {rel_source_files} && touch {rel_build_files}.ok",
  build_files = "{source_files}.ok",
)

#---------------------------------------------------------------------------------------------------

verilated_o = exports.compile_cpp(
  name    = "verilated.o",
  in_src  = "/usr/local/share/verilator/include/verilated.cpp",
  out_obj = "verilator/verilated.o",
)


verilated_threads_o = exports.compile_cpp(
  name    = "verilated_threads.o",
  in_src  = "/usr/local/share/verilator/include/verilated_threads.cpp",
  out_obj = "verilator/verilated_threads.o",
)

def gen_vlparams(c):
  result = []
  for key, val in c.items():
    if isinstance(val, str):
      val = f"\\\"{val}\\\""
    result.append(f"-G{key}={val}")
  return result

verilator_cmd = hancho.Config(
  desc = "Run Verilator on {rel(in_top)}",
  command = "verilator -Wno-width --public {gen_vlparams(params)} {join_prefix('-I', includes)} --cc {rel(in_top)} -Mdir {path.dirname(rel(out_makefile))}",
  out_makefile = r"{re.sub(r'([^/\\]+).sv', r'V\1.mk', in_top)}",
  out_header   = r"{re.sub(r'([^/\\]+).sv', r'V\1.h',  in_top)}",
  includes = ["."],
  gen_vlparams = gen_vlparams,
  params = {},
)

def verilator(*, name, in_top, includes = [], **kwargs):
  verilated = verilator_cmd(
    kwargs,
    in_top = in_top,
    includes = includes,
  )

  compiled = exports.make(
    kwargs,
    in_makefile = verilated.promise("out_makefile"),
    out_obj     = "{swap_ext(in_makefile, '__ALL.o')}",
    flags = [
      "-B",
    ],
  )

  lib = exports.cpp_lib(
    kwargs,
    name    = f"{name} lib",
    in_top  = in_top,
    in_objs = [verilated_o, verilated_threads_o, compiled],
    out_lib = "{swap_ext(in_top, '.a')}",
  )

  return hancho.Task(
    out_lib    = lib.promise("out_lib"),
    out_header = verilated.promise("out_header"),
  )

exports.verilator = hancho.Config(call = verilator)

#---------------------------------------------------------------------------------------------------

exports.sv2v = hancho.Config(
  desc = "Run sv2v on {rel(in_sv)}",
  command = "{repo_path}/symlinks/sv2v/bin/sv2v {join_prefix('-I', includes)} {rel(in_sv)} -w {rel(out_v)}",
  includes = ["-I."],
  out_v = "{swap_ext(in_sv, '.v')}",
)

def gen_chparams(c):
  result = []
  for key, val in c.items():
    if isinstance(val, str):
      val = f"\"{val}\""
    result.append(f"chparam -set {key} {val} {{top}};")
  return result

exports.yosys = hancho.Config(
  desc = "Run yosys on {rel(in_sv)}",
  command = "yosys -q -p 'read_verilog -defer {join_prefix('-I', includes)} -sv {rel(in_sv)}; dump; {gen_chparams(params)} synth_ice40 -top {top} -json {rel(out_json)};'",
  gen_chparams = gen_chparams,
  top = "{path.splitext(path.basename(in_sv))[0]}",
  params = {},
  includes = [],
)

exports.nextpnr = hancho.Config(
  desc = "Run nextpnr-ice40 on {rel(in_json)}",
  command = "nextpnr-ice40 {flags} -q --{chip} --package {package} --json {rel(in_json)} --asc {rel(out_asc)} --pcf {pcf}",
  flags = "",
)

exports.icepack = hancho.Config(
  desc = "Run icepack on {rel(in_asc)}",
  command = "icepack {rel(in_asc)} {rel(out_bin)}",
)

#---------------------------------------------------------------------------------------------------

def gen_ivparams(params):
  result = []
  for key, val in params.items():
    if isinstance(val, str):
      # Why Icarus wants string params to have escaped quotes is a mystery.
      val = f"\\\"{val}\\\""
    result.append(f"-P{{top}}.{key}={val}")
  return result

exports.iverilog = hancho.Config(
  desc = "Run iverilog on {rel(in_sv)}",
  command = "iverilog {gen_ivparams(params)} -s{top} -g2012 {defines} {join_prefix('-I', includes)} {rel(in_sv)} -o {rel(out_iv)}",
  gen_ivparams = gen_ivparams,
)

#---------------------------------------------------------------------------------------------------
