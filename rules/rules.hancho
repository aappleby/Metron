import hancho

metrolib = imports.metrolib

#---------------------------------------------------------------------------------------------------

exports.cpp_settings = hancho.Config(
  cpp_flags = ["-rdynamic", "-ggdb3"],
  includes  = [".", "{repo_path}", "{repo_path}/symlinks", "{repo_path}/symlinks/metrolib", "{repo_path}/symlinks/matcheroni"],
  warnings  = ["all", "error", "suggest-override", "no-unused-function", "no-sign-compare", "no-unused-variable", "no-unused-but-set-variable"],
  sys_libs  = ["gcc", "c", "SDL2"],
  build_tag = imports.build_tag,
)

#---------------------------------------------------------------------------------------------------

exports.compile_cpp = hancho.Config(metrolib.rules.compile_cpp, exports.cpp_settings)
exports.cpp_bin     = hancho.Config(metrolib.rules.cpp_bin,     exports.cpp_settings)
exports.cpp_lib     = hancho.Config(metrolib.rules.cpp_lib,     exports.cpp_settings)
exports.make        = metrolib.rules.make

exports.check_cpp_syntax = hancho.Config(
  command = "g++ -I. -I{repo_path} -fsyntax-only -c {rel_source_files} && touch {rel_build_files}.ok",
  build_files = "{source_files}.ok",
)

#---------------------------------------------------------------------------------------------------

verilated_o = metrolib.rules.compile_cpp(
  exports.cpp_settings,
  name    = "verilated.o",
  in_src  = "/usr/local/share/verilator/include/verilated.cpp",
  out_obj = "verilator/verilated.o",
)


verilated_threads_o = metrolib.rules.compile_cpp(
  exports.cpp_settings,
  name    = "verilated_threads.o",
  in_src  = "/usr/local/share/verilator/include/verilated_threads.cpp",
  out_obj = "verilator/verilated_threads.o",
)

verilator_cmd = hancho.Config(
  command = "verilator -Wno-width --public {join_prefix('-I', includes)} --cc {rel(in_top)} -Mdir {path.dirname(rel(out_makefile))}",
  out_makefile = r"{re.sub(r'([^/\\]+).sv', r'V\1.mk', in_top)}",
  out_header   = r"{re.sub(r'([^/\\]+).sv', r'V\1.h',  in_top)}",
  includes = ["."],
)

make_cmd = hancho.Config(
  command   = "make --quiet -C {make_path} -f {make_file} > /dev/null",
  make_path = "{path.dirname(in_makefile)}",
  make_file = "{path.basename(in_makefile)}",
  in_makefile = None,
)

#---------------------------------------------------------------------------------------------------

def gen_verilator(self, *args, **kwargs):
  config = hancho.Config(self, *args, **kwargs)

  in_top   = config.pop("in_top")
  includes = config.pop("includes")

  verilated = verilator_cmd(
    config,
    in_top = in_top,
    includes = includes,
  )

  compiled = make_cmd(
    config,
    in_makefile = verilated.promise("out_makefile"),
    out_obj     = "{swap_ext(in_makefile, '__ALL.o')}",
  )

  lib = metrolib.rules.cpp_lib(
    config,
    in_top  = in_top,
    in_objs = [verilated_o, verilated_threads_o, compiled],
    out_lib = "{swap_ext(in_top, '.a')}",
  )

  return hancho.Task(
    command = ":",
    in_top  = in_top,
    out_lib = lib.promise("out_lib")
  )

exports.verilator = hancho.Config(call = gen_verilator)

#---------------------------------------------------------------------------------------------------
