import glob

rules    = hancho.rules
metron   = hancho.metron
metrolib = hancho.metrolib

#---------------------------------------------------------------------------------------------------

test_logic_bin = hancho(
  rules.cpp_bin,
  name    = "utils/test_logic",
  in_srcs = "utils/test_logic.cpp",
  in_objs = metrolib.libcore,
  out_bin = "utils/test_logic",
  includes = [
    "{repo_dir}",
    "{repo_dir}/symlinks/metrolib"
  ],
)

test_logic = hancho(
  command = "{in_test}",
  in_test = test_logic_bin,
  out_log = "{stem(in_test)}.test",
)

#---------------------------------------------------------------------------------------------------

def gen_chparams(c):
  result = []
  for key, val in c.items():
    if isinstance(val, str):
      val = f"\"{val}\""
    result.append(f"chparam -set {key} {val} {{top}};")
  return result

test_helpers = hancho.Config(
  gen_chparams = gen_chparams,
  params = {},
  includes = ["-I."],
  should_fail = False,
)

test_yosys_synth_pass = hancho.Command(
  test_helpers,
  desc = "test yosys synth pass {rel(in_src)}",
  command = "yosys -q -p 'read_verilog {includes} -sv {rel(in_src)}; {gen_chparams(params)} synth_ice40 -json /dev/null'",
  #out_log = "{in_src}.yosys_synth.test",
)

test_yosys_synth_fail = hancho.Command(
  test_helpers,
  desc = "test yosys synth fail {rel(in_src)}",
  command = "yosys -q -p 'read_verilog {includes} -sv {rel(in_src)}; {gen_chparams(params)} synth_ice40 -json /dev/null'",
  #out_log = "{in_src}.yosys_synth.test",
  should_fail = True,
)

test_verilator = hancho.Command(
  test_helpers,
  desc = "test verilator {rel(in_src)}",
  command = "verilator -Wno-width {includes} --lint-only {rel(in_src)}",
  #out_log = "{in_src}.verilator.test",
)

test_icarus = hancho.Command(
  test_helpers,
  desc = "test icarus {rel(in_src)}",
  command = "iverilog -g2012 -Wall {includes} -o /dev/null {rel(in_src)}",
  #out_log = "{in_src}.icarus.test",
)

"""
test_syntax = test_helpers.extend(
  desc = "test c++ syntax {rel(in_src)}",
  command = "g++ -I. -I{repo_dir} --std=gnu++2a -fsyntax-only -c {rel(in_src)}",
  out_log = "{in_src}.syntax.test"
)

test_metron_pass = test_helpers.extend(
  desc = "test metron {rel(in_src)}",
  command = "{metron_bin} -q -c {rel(in_src)} -o {rel(out_sv)}",
  out_sv = "{swap_ext(in_src, '.sv')}",
  metron_bin = metron.metron_bin,
  out_log = "{in_src}.metron.test"
)

test_metron_fail = test_helpers.extend(
  desc = "test metron fails {rel(in_src)}",
  command = "{metron_bin} -q -c {rel(in_src)} -o /dev/null",
  metron_bin = metron.metron_bin,
  out_log = "{in_src}.metron.test",
  should_fail = True
)

test_diff = test_helpers.extend(
  desc = "test diff {rel(in_src_A)} {rel(in_src_B)}",
  command = "diff {rel(in_src_A)} {rel(in_src_B)}",
  out_log = "{in_src_A}.diff.test"
)
"""

test_sv2v = hancho.Command(
  test_helpers,
  desc = "test sv2v {rel(in_src)}",
  command = "sv2v {includes} {rel(in_src)} -w {rel(out_v)}",
  includes = ["-I.", "-I{repo_dir}"],
  out_v = "{swap_ext(in_src, '.v')}",
)

#---------------------------------------------------------------------------------------------------
# Test tool quirks

for file_sv in glob.glob("tools/pass/*.sv"):
  file_v = hancho(test_sv2v, in_src = file_sv)
  hancho(test_verilator, in_src = file_sv)
  hancho(test_icarus, in_src = file_v)
  hancho(test_yosys_synth_pass, in_src = file_v)

for file in glob.glob("tools/yosys/fail/*.sv"):
  hancho(test_yosys_synth_fail, in_src = file)

#---------------------------------------------------------------------------------------------------
# Test files in metron/pass and metron/fail

"""
copy = hancho.Command(command = "cp {in_file} {out_file}")

message_copy = copy(
  in_file = "{repo_dir}/tests/metron/pass/message.hex",
  out_file = "message.hex"
)

for file in glob.glob("metron/pass/*.h"):
  includes = ["-I.", "-I{repo_dir}", "-I{build_dir}/metron/pass"]

  test_syntax(in_src = file)

  file_sv = test_metron_pass(
    in_src = file,
    should_fail = False
  ).promise("out_sv")

  file_v = test_sv2v(
    in_src = file_sv,
    includes = includes
  ).promise("out_v")

  golden = file.replace("/pass/", "/golden/").replace(".h", ".sv")
  test_diff(in_src_A = file_sv, in_src_B = golden)

  test_verilator(
    in_src = file_sv,
    in_message = message_copy.promise("out_file"),
    includes = includes
  )
  test_icarus(in_src = file_v, includes = includes)
  test_yosys_synth_pass(in_src = file_v, includes = includes)

for file in glob.glob("metron/fail/*.h"):
  test_syntax(in_src = file)
  test_metron_fail(in_src = file)

#---------------------------------------------------------------------------------------------------
# Lockstep tests

def test_lockstep(lockstep_file, should_fail = False):
  out_sv = hancho(test_metron_pass, in_src = lockstep_file).promise("out_sv")

  lockstep_includes = [
    ".",
    "{repo_dir}",
    "{repo_dir}/symlinks",
    "{repo_dir}/symlinks/metrolib",
    "{build_dir}/lockstep",
    "/usr/local/share/verilator/include",
  ]

  out_vl = hancho(
    rules.verilator,
    name = "test lockstep",
    in_top = out_sv,
    build_tag = "test",
    includes = lockstep_includes,
  )

  lockstep_obj = hancho(
    command = "g++ -O3 -std=gnu++2a {join_prefix('-D', defines)} {join_prefix('-I', includes)} -c {rel(in_src)} -o {rel(out_obj)}",
    includes = lockstep_includes,
    defines = [
      "MT_TOP=Module",
      "VL_TOP=V{stem(in_hdr)}",
      "MT_HEADER={in_hdr}",
      "VL_HEADER={build_dir}/lockstep/V{stem(in_hdr)}.h",
    ],
    in_src  = "lockstep/test_lockstep.cpp",
    in_hdr  = lockstep_file,
    in_deps = out_vl.promise("out_header"),
    out_obj = "{swap_ext(in_hdr, '.o')}",
    build_tag = "test",
  )

  lockstep_bin = hancho(
    command = "g++ {in_obj} {in_lib} -o {rel(out_bin)}",
    in_obj = lockstep_obj.promise("out_obj"),
    in_lib = [out_vl.promise("out_lib"), imports.metrolib.libcore],
    out_bin = "{swap_ext(in_obj, '')}",
    build_tag = "test",
  )

  hancho(
    command  = "{in_bin}",
    in_bin   = lockstep_bin.promise("out_bin"),
    out_log  = "{in_bin}.test",
    should_fail = should_fail,
    build_tag = "test",
  )

for file in ["lockstep/lfsr.h", "lockstep/counter.h", "lockstep/funcs_and_tasks.h"]:
  test_lockstep(file, should_fail = False)

for file in ["lockstep/timeout_bad.h", "lockstep/lockstep_bad.h"]:
  test_lockstep(file, should_fail = True)

#---------------------------------------------------------------------------------------------------
"""